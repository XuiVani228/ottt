import telebot
from telebot import types
import sqlite3
import requests
from datetime import datetime, timedelta

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = '7410011951:AAGwn39kdCKK6EBGIvKQcEPb1pbmUHiVU0o'

# –ó–∞–º–µ–Ω–∏—Ç–µ '@Medak_fun' –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (—Å @)
CHANNEL_USERNAME = '@tradeebybit'

# ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ @getmyid_bot)
CHANNEL_ID = -1002343802383  # –ü—Ä–∏–º–µ—Ä ID, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤–∞—à ID –≤ Telegram)
ADMIN_ID = 1996167272  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID

# –°—É–º–º–∞, –Ω–∞—á–∏—Å–ª—è–µ–º–∞—è –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
REFERRAL_REWARD = 15

bot = telebot.TeleBot(BOT_TOKEN)


# --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
def create_connection():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite."""
    conn = None
    try:
        conn = sqlite3.connect('bot_database.db')  # –ò–º—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    except sqlite3.Error as e:
        print(e)
    return conn


def create_tables(conn):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    sql_create_users_table = """
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        referrer_id INTEGER,
        balance REAL DEFAULT 0.0,
        username TEXT
    );
    """

    sql_create_promo_table = """
    CREATE TABLE IF NOT EXISTS promocodes (
        code TEXT PRIMARY KEY,
        amount REAL,
        expiry_date TEXT,
        max_uses INTEGER,
        uses INTEGER DEFAULT 0
    );
    """

    sql_create_used_promo_table = """
    CREATE TABLE IF NOT EXISTS used_promocodes (
        user_id INTEGER,
        code TEXT,
        PRIMARY KEY (user_id, code)
    );
    """

    try:
        cursor = conn.cursor()
        cursor.execute(sql_create_users_table)
        cursor.execute(sql_create_promo_table)
        cursor.execute(sql_create_used_promo_table)
        conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")

def add_user(conn, user_id, referrer_id=None, username=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    sql = ''' INSERT INTO users(user_id,referrer_id, username)
              VALUES(?,?,?) '''
    cur = conn.cursor()
    try:
        cur.execute(sql, (user_id, referrer_id, username))
        conn.commit()
        return True  # –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
    except sqlite3.IntegrityError:
        return False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False


def get_balance(conn, user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    sql = ''' SELECT balance FROM users WHERE user_id = ? '''
    cur = conn.cursor()
    cur.execute(sql, (user_id,))
    row = cur.fetchone()
    if row:
        return row[0]
    else:
        return 0.0


def update_balance(conn, user_id, amount):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    sql = ''' UPDATE users SET balance = balance + ? WHERE user_id = ? '''
    cur = conn.cursor()
    cur.execute(sql, (amount, user_id))
    conn.commit()


def get_referral_link(bot_name):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É."""
    return f"https://t.me/{bot_name}?start="


def add_promocode(conn, code, amount, expiry_date, max_uses):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    sql = ''' INSERT INTO promocodes(code, amount, expiry_date, max_uses)
              VALUES(?,?,?,?) '''
    cur = conn.cursor()
    try:
        cur.execute(sql, (code, amount, expiry_date, max_uses))
        conn.commit()
        return True
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        return False


def check_promocode(conn, code):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å."""
    sql = ''' SELECT amount, expiry_date, max_uses, uses FROM promocodes WHERE code = ? '''
    cur = conn.cursor()
    cur.execute(sql, (code,))
    row = cur.fetchone()

    if not row:
        return None  # –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω

    amount, expiry_date, max_uses, uses = row

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if datetime.now() > datetime.strptime(expiry_date, "%Y-%m-%d"):
        return None  # –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    if uses >= max_uses:
        return None  # –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω

    return amount


def use_promocode(conn, user_id, code):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
    sql_check = ''' SELECT 1 FROM used_promocodes WHERE user_id = ? AND code = ? '''
    cur = conn.cursor()
    cur.execute(sql_check, (user_id, code))
    if cur.fetchone():
        return False  # –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
    sql_get = ''' SELECT amount, max_uses, uses FROM promocodes WHERE code = ? '''
    cur.execute(sql_get, (code,))
    row = cur.fetchone()

    if not row:
        return False

    amount, max_uses, uses = row

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    if uses >= max_uses:
        return False

    # –ù–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    update_balance(conn, user_id, amount)

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    sql_update = ''' UPDATE promocodes SET uses = uses + 1 WHERE code = ? '''
    cur.execute(sql_update, (code,))

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    sql_add = ''' INSERT INTO used_promocodes(user_id, code) VALUES(?,?) '''
    cur.execute(sql_add, (user_id, code))

    conn.commit()
    return True


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
def check_subscription(chat_id, user_id):
    try:
        member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ('member', 'administrator', 'creator')
    except telebot.apihelper.ApiTelegramException as e:
        if e.description == 'User not found':
            return False
        else:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@bot.message_handler(commands=['start'])
def start(message):
    conn = create_connection()
    if conn is None:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ‚öôÔ∏è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    create_tables(conn)  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

    user_id = message.from_user.id
    username = message.from_user.username  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    referrer_id = None

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã /start
    if len(message.text.split()) > 1:
        try:
            referrer_id = int(message.text.split()[1])
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ üö´.")
            referrer_id = None

    added = add_user(conn, user_id, referrer_id, username)

    if added and referrer_id:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
        update_balance(conn, referrer_id, REFERRAL_REWARD)
        bot.send_message(referrer_id,
                         f"üéâ –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REFERRAL_REWARD} —Ä—É–±–ª–µ–π! üí∞")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if check_subscription(message.chat.id, user_id):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
        item2 = types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
        item3 = types.KeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω")
        item4 = types.KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å")
        item5 = types.KeyboardButton("üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥")
        markup.add(item1, item2, item3, item4, item5)

        bot.send_message(message.chat.id, f'üéâ –ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø–∞–ª –≤ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {CHANNEL_USERNAME} üöÄ',
                         reply_markup=markup)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        markup = types.InlineKeyboardMarkup(row_width=1)
        item = types.InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
                                          url=f"https://t.me/{CHANNEL_USERNAME[1:]}")  # –£–±–∏—Ä–∞–µ–º @ –¥–ª—è —Å—Å—ã–ª–∫–∏
        markup.add(item)
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª! üîî", reply_markup=markup)

    conn.close()


@bot.message_handler(func=lambda message: message.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
def referrals(message):
    conn = create_connection()
    if conn is None:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ‚öôÔ∏è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_id = message.from_user.id
    bot_username = bot.get_me().username
    referral_link = get_referral_link(bot_username) + str(user_id)
    bot.send_message(message.chat.id, f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}")

    conn.close()


@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
def bot_info(message):
    bot.send_message(message.chat.id, """ü§ñ MedakBOT ‚Äî —ç—Ç–æ –±–æ—Ç, –≥–¥–µ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –∫—Ä—É—Ç—ã–µ –¥–æ–Ω–∞—Ç—ã –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –Ω–∞ FunTime!

üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
1. üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π: –ü—Ä–∏–≥–ª–∞—Å–∏ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –≤ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∞–π 10—Ä –∑–∞ –∫–∞–∂–¥–æ–≥–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞.
2. üí∏ –û–±–º–µ–Ω–∏–≤–∞–π –¥—Ä–µ—Ñ—Ñ—ã –Ω–∞ –¥–æ–Ω–∞—Ç: –ù–∞–∫–æ–ø–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã –∏ –æ–±–º–µ–Ω—è–π –∏—Ö –Ω–∞ —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–æ–Ω–∞—Ç–∞ –¥–ª—è FunTime.
3. üîÑ –°–ª–µ–¥–∏ –∑–∞ —Å–≤–æ–∏–º –±–∞–ª–∞–Ω—Å–æ–º: –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É "üí∞ –ë–∞–ª–∞–Ω—Å", —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤–∞–ª—é—Ç—ã —É —Ç–µ–±—è –Ω–∞–∫–æ–ø–ª–µ–Ω–æ.
4. –ü—Ä–∏ –ø–æ–∫—É–ø–∫–∏ –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –µ—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä –æ–Ω —É –≤–∞—Å –æ–ø–ª–∞—Ç–∏—Ç—Å—è –Ω–æ —Ç–∞–∫ –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–æ —è –≤–∞–º –µ–≥–æ –Ω–µ –≤—ã–¥–∞–º!!!

üìå –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏?
- –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π, –ø–æ–¥–µ–ª–∏–≤—à–∏—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π. –ö–∞–∂–¥—ã–π –¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∏ –ø–æ–¥–ø–∏—à–µ—Ç—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–º 10—Ä.
- –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π, —Ç–µ–º –±–æ–ª—å—à–µ –≤–∞–ª—é—Ç—ã –∏ –Ω–∞–≥—Ä–∞–¥!""")


@bot.message_handler(func=lambda message: message.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
def shop(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üéÆ FunTime")
    back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(item1, back)
    bot.send_message(message.chat.id, "‚ú® –í—ã–±–∏—Ä–∞–π –Ω–∞ –∫–∞–∫–æ–π —Å–µ—Ä–≤–µ—Ä: ‚ú®", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
def back_to_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
    item2 = types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
    item3 = types.KeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω")
    item4 = types.KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å")
    item5 = types.KeyboardButton("üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥")
    markup.add(item1, item2, item3, item4, item5)
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üéÆ FunTime")
def funtime_shop(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üëë –ë–∞—Ä–æ–Ω")
    item2 = types.KeyboardButton("üõ°Ô∏è –°—Ç—Ä–∞–∂")
    item3 = types.KeyboardButton("ü¶∏ –ì–µ—Ä–æ–π")
    item4 = types.KeyboardButton("üéÅ –¢–æ–∫–µ–Ω –∫–µ–π—Å (29—Ä)")
    back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(item1, item2, item3, item4, back)
    bot.send_message(message.chat.id, "üíé –í—ã–±–∏—Ä–∞–π –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é: üíé", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üëë –ë–∞—Ä–æ–Ω")
def baron_prices(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("30 –¥–Ω–µ–π (30—Ä)", callback_data="baron_30")
    item2 = types.InlineKeyboardButton("90 –¥–Ω–µ–π (79—Ä)", callback_data="baron_90")
    item3 = types.InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞ (150—Ä)", callback_data="baron_forever")
    markup.add(item1, item2, item3)
    bot.send_message(message.chat.id, "‚è≥ –ù–∞ —Å–∫–æ–ª—å–∫–æ?", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üõ°Ô∏è –°—Ç—Ä–∞–∂")
def guard_prices(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("30 –¥–Ω–µ–π (35—Ä)", callback_data="guard_30")
    item2 = types.InlineKeyboardButton("90 –¥–Ω–µ–π (89—Ä)", callback_data="guard_90")
    item3 = types.InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞ (199—Ä)", callback_data="guard_forever")
    markup.add(item1, item2, item3)
    bot.send_message(message.chat.id, "‚è≥ –ù–∞ —Å–∫–æ–ª—å–∫–æ?", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "ü¶∏ –ì–µ—Ä–æ–π")
def hero_prices(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("30 –¥–Ω–µ–π (49—Ä)", callback_data="hero_30")
    item2 = types.InlineKeyboardButton("90 –¥–Ω–µ–π (99—Ä)", callback_data="hero_90")
    item3 = types.InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞ (249—Ä)", callback_data="hero_forever")
    markup.add(item1, item2, item3)
    bot.send_message(message.chat.id, "‚è≥ –ù–∞ —Å–∫–æ–ª—å–∫–æ?", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üéÅ –¢–æ–∫–µ–Ω –∫–µ–π—Å (29—Ä)")
def token_case(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–î–∞", callback_data="token_case_buy")
    item2 = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_buy")
    markup.add(item1, item2)
    bot.send_message(message.chat.id, "üí∞ –¢–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –¢–æ–∫–µ–Ω –∫–µ–π—Å (29—Ä)?", reply_markup=markup)


@bot.message_handler(commands=['database'])
def add_money_command(message):
    msg = bot.send_message(message.chat.id,
                           "–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞:")
    bot.register_next_step_handler(msg, process_add_money)


def process_add_money(message):
    try:
        amount = float(message.text.strip())

        if amount <= 0:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            return

        conn = create_connection()
        if conn is None:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            return

        user_id = message.from_user.id
        username = message.from_user.username

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cur = conn.cursor()
        cur.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
        if not cur.fetchone():
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            add_user(conn, user_id, username=username)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        update_balance(conn, user_id, amount)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        new_balance = get_balance(conn, user_id)

        bot.send_message(message.chat.id,
                         f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:")
        conn.close()
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")

@bot.message_handler(func=lambda message: message.text == "üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥")
def promo_handler(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    bot.register_next_step_handler(msg, process_promo)


def process_promo(message):
    conn = create_connection()
    if conn is None:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ‚öôÔ∏è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_id = message.from_user.id
    promo_code = message.text.strip()

    amount = check_promocode(conn, promo_code)
    if amount is None:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
    else:
        if use_promocode(conn, user_id, promo_code):
            bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} —Ä—É–±–ª–µ–π!")
        else:
            bot.send_message(message.chat.id, "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")

    conn.close()


@bot.message_handler(commands=['addpromo'])
def add_promo_command(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    msg = bot.send_message(message.chat.id,
                           "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ö–æ–¥ –°—É–º–º–∞ –î–∞—Ç–∞_–æ–∫–æ–Ω—á–∞–Ω–∏—è(–ì–ì–ì–ì-–ú–ú-–î–î) –ú–∞–∫—Å_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n\n–ü—Ä–∏–º–µ—Ä: SUMMER2023 50 2023-12-31 100")
    bot.register_next_step_handler(msg, process_add_promo)


def process_add_promo(message):
    if message.from_user.id != ADMIN_ID:
        return

    try:
        parts = message.text.split()
        if len(parts) != 4:
            raise ValueError

        code = parts[0]
        amount = float(parts[1])
        expiry_date = parts[2]
        max_uses = int(parts[3])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        datetime.strptime(expiry_date, "%Y-%m-%d")

        conn = create_connection()
        if conn is None:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            return

        if add_promocode(conn, code, amount, expiry_date, max_uses):
            bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.")

        conn.close()
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    conn = create_connection()
    if conn is None:
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ‚öôÔ∏è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_id = call.from_user.id  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º call.from_user.id –≤–º–µ—Å—Ç–æ call.message.chat.id
    username = call.from_user.username  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ–ª—É—á–∞–µ–º username –∏–∑ call.from_user
    action = call.data
    item_name = ""
    price = 0
    period = ""

    if action.startswith("baron_"):
        item_name = "–ë–∞—Ä–æ–Ω"
        if action == "baron_30":
            price = 30
            period = "30 –¥–Ω–µ–π"
        elif action == "baron_90":
            price = 79
            period = "90 –¥–Ω–µ–π"
        elif action == "baron_forever":
            price = 150
            period = "–Ω–∞–≤—Å–µ–≥–¥–∞"
    elif action.startswith("guard_"):
        item_name = "–°—Ç—Ä–∞–∂"
        if action == "guard_30":
            price = 35
            period = "30 –¥–Ω–µ–π"
        elif action == "guard_90":
            price = 89
            period = "90 –¥–Ω–µ–π"
        elif action == "guard_forever":
            price = 199
            period = "–Ω–∞–≤—Å–µ–≥–¥–∞"
    elif action.startswith("hero_"):
        item_name = "–ì–µ—Ä–æ–π"
        if action == "hero_30":
            price = 49
            period = "30 –¥–Ω–µ–π"
        elif action == "hero_90":
            price = 99
            period = "90 –¥–Ω–µ–π"
        elif action == "hero_forever":
            price = 249
            period = "–Ω–∞–≤—Å–µ–≥–¥–∞"
    elif action == "token_case_buy":
        item_name = "–¢–æ–∫–µ–Ω –∫–µ–π—Å"
        price = 29
        period = ""

    if item_name != "":
        balance = get_balance(conn, user_id)
        if balance >= price:
            markup = types.InlineKeyboardMarkup(row_width=2)
            yes_button = types.InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_buy_{action}")
            no_button = types.InlineKeyboardButton("üö´ –ù–µ—Ç", callback_data="cancel_buy")
            markup.add(yes_button, no_button)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=f"üí∞ –¢–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {item_name} {period} –∑–∞ {price} —Ä—É–±–ª–µ–π?\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.",
                                  reply_markup=markup)
        else:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=f"üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! üòî\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.")

    elif action.startswith("confirm_buy_"):
        purchase_action = action.replace("confirm_buy_", "")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏ —Ü–µ–Ω—É
        if purchase_action == "baron_30":
            item_name = "–ë–∞—Ä–æ–Ω"
            price = 30
            period = "30 –¥–Ω–µ–π"
        elif purchase_action == "baron_90":
            item_name = "–ë–∞—Ä–æ–Ω"
            price = 79
            period = "90 –¥–Ω–µ–π"
        elif purchase_action == "baron_forever":
            item_name = "–ë–∞—Ä–æ–Ω"
            price = 150
            period = "–Ω–∞–≤—Å–µ–≥–¥–∞"
        elif purchase_action == "guard_30":
            item_name = "–°—Ç—Ä–∞–∂"
            price = 35
            period = "30 –¥–Ω–µ–π"
        elif purchase_action == "guard_90":
            item_name = "–°—Ç—Ä–∞–∂"
            price = 89
            period = "90 –¥–Ω–µ–π"
        elif purchase_action == "guard_forever":
            item_name = "–°—Ç—Ä–∞–∂"
            price = 199
            period = "–Ω–∞–≤—Å–µ–≥–¥–∞"
        elif purchase_action == "hero_30":
            item_name = "–ì–µ—Ä–æ–π"
            price = 49
            period = "30 –¥–Ω–µ–π"
        elif purchase_action == "hero_90":
            item_name = "–ì–µ—Ä–æ–π"
            price = 99
            period = "90 –¥–Ω–µ–π"
        elif purchase_action == "hero_forever":
            item_name = "–ì–µ—Ä–æ–π"
            price = 249
            period = "–Ω–∞–≤—Å–µ–≥–¥–∞"
        elif purchase_action == "token_case_buy":
            item_name = "–¢–æ–∫–µ–Ω –∫–µ–π—Å"
            price = 29
            period = ""

        balance = get_balance(conn, user_id)
        if balance >= price:
            # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
            update_balance(conn, user_id, -price)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
            purchase_message = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {item_name}"
            if period:
                purchase_message += f" –Ω–∞ —Å—Ä–æ–∫: {period}"
            purchase_message += f" –∑–∞ {price} —Ä—É–±–ª–µ–π."

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text=purchase_message)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            admin_message = f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n–¢–æ–≤–∞—Ä: {item_name}"
            if period:
                admin_message += f" ({period})"
            admin_message += f"\n–°—É–º–º–∞: {price} —Ä—É–±.\n–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è: {balance - price} —Ä—É–±."

            bot.send_message(ADMIN_ID, admin_message)
        else:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text="üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! üòî –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É.")

    elif action == "cancel_buy":
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text="üö´ –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    conn.close()


@bot.message_handler(func=lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
def balance(message):
    conn = create_connection()
    if conn is None:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ‚öôÔ∏è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_id = message.from_user.id
    balance = get_balance(conn, user_id)
    bot.send_message(message.chat.id, f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±–ª–µ–π.")

    conn.close()


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! ‚úÖ")
    try:
        bot.delete_webhook()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
    conn = create_connection()
    if conn is not None:
        create_tables(conn)
        conn.close()
    bot.infinity_polling()